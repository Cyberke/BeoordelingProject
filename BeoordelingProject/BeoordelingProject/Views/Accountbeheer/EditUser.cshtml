@model BeoordelingProject.ViewModel.AccountbeheerVM
@using Microsoft.AspNet.Identity
@using BeoordelingProject.Helper

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    int counterTotal = 0;
    if (Model.SelectedStudentId != null)
    {
        counterTotal = Model.SelectedStudentId.Count;
    }
}

<script>
    angular.module("appModule").value("studentenlijst", @Html.Raw(Model.StudentenString));
</script>
<div id="container">
    @Html.ActionLink("Overzicht", "Index", "Admin", null, new { @class = "link" })
    <label> > </label>
    @Html.ActionLink("Adminpaneel", "Index", "Adminpaneel", null, new { @class = "link" })
    <label> > </label>
    @Html.ActionLink("Accountbeheer", "AddStudentRol", "Accountbeheer", null, new { @class = "link" })
    <label> > <strong>Bewerken</strong></label>
    <br />
    @using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm" }))
    {
        @Html.AntiForgeryToken()

        <b><a class="uitloggen" href="javascript:document.getElementById('logoutForm').submit()">Log uit.</a></b>
        @Html.Label("Welkom " + User.Identity.Name.Split('.')[0] + "!", new { @class = "username" })
    }
    <br /><br />
    @using (Html.BeginForm())
    {
        <label class="errorViewbag">@ViewBag.Error</label><br />

            <div class="login">
                <div class="gebruikerinfo">
                    <table>
                        <tr>
                            <td>@Html.Label("Gebruikersnaam")</td>
                            <td>@Html.TextBoxFor(model => model.registerVM.UserName, new { @Value = Model.Accounts[0].UserName , @class = "textbox" })</td>
                        </tr>
                        <tr>
                            <td></td>
                            <td>@Html.ValidationMessageFor(model => model.registerVM.UserName, "Gelieve een naam in te geven")</td>
                        </tr>
                        <tr>
                            <td class="addUser"><input type="submit" value="Bewerken" class="actionbutton" /></td>
                        </tr>
                    </table>
                </div>
                <div class="studentrolinfo">
                    <table class="AddDeleteTable">
                        <tr>
                            <td><label class="actionbutton addDeleteButton" onclick="newStudentRol()">+</label></td>
                            <td><label class="actionbutton addDeleteButton" onclick="removeStudentRol()">-</label></td>
                        </tr>
                    </table>
                    <div class="studentrollen">
                        <div class='studentrolSelectlist'>
                            Student: @Html.DropDownListFor(modelItem => modelItem.SelectedStudentId, Model.Studenten as SelectList, new { id = "studentList[0]" })
                            Rol: @Html.DropDownListFor(modelItem => modelItem.SelectedRolId, Model.Rollen as SelectList, new { id = "rolList[0]" })
                        </div>
                        @if (Model.SelectedStudentId != null)
                        {
                            for (int i = 1; i < Model.SelectedStudentId.Count; i++)
                            {
                                <text>
                                    <div class="studentrolSelectlist">
                                        Student:
                                        @Html.DropDownListFor(modelItem => modelItem.SelectedStudentId, Model.Studenten as SelectList, new { id = "studentList[" + @i + "]" })
                                        Rol:
                                        @Html.DropDownListFor(modelItem => modelItem.SelectedRolId, Model.Rollen as SelectList, new { id = "rolList[" + @i + "]" })
                                    </div>
                                </text>
                            }
                        }
                    </div>
                </div>
            </div>
    }
</div>

<script>
    @if (Model.SelectedStudentId != null)
    {
        <text>var counter = @Model.SelectedStudentId.Count
        counter--;
        </text>
    }
    else
    {
        <text>var counter = 1;</text>
    }

    @if (counterTotal != 0)
    {
        <text>var selectlist;</text>
        for (int i = counterTotal - 1; i > -1; i--)
        {
            <text>
            selectlist = document.getElementById("studentList[@i]");
            selectlist.value = @Model.SelectedStudentId[i]

            selectlist = document.getElementById("rolList[@i]");
            selectlist.value = @Model.SelectedRolId[i]
            </text>
        }
    }

    function newStudentRol()
    {

        /*
            min knop houd de waarde bij die de counter toen had.
            wanneer op de min knop geduwt wordt: for van de "minwaarde" tot de huidige counter en alle elementen die overeen komen verwijderen uit de div EN uit de arrays van studentId en rolId
        */
        var div = document.getElementsByClassName("studentrollen")[0];

        var studentlist = @JShelper.EncodeJavaScriptString(Html.DropDownListFor(modelItem => modelItem.SelectedStudentId, Model.Studenten as SelectList, new { id = "studentList[JSCounter]" }).ToString())
        studentlist = studentlist.replace("JSCounter", counter);

        var rollist = @JShelper.EncodeJavaScriptString(Html.DropDownListFor(modelItem => modelItem.SelectedRolId, Model.Rollen as SelectList, new { id = "rolList[JSCounter]" }).ToString())
        rollist = rollist.replace("JSCounter", counter);

        var studentroldiv = document.createElement("div");
        studentroldiv.className = "studentrolSelectlist";
        studentroldiv.innerHTML = "Student: " + studentlist + " Rol: " + rollist;
        div.appendChild(studentroldiv);

        counter++;
    }

    function removeStudentRol()
    {
        var div = document.getElementsByClassName("studentrollen")[0];
        var removelast = document.getElementsByClassName("studentrolSelectlist")[counter];

        //alert(removelast.innerHTML);


        if(counter > 0)
        {
            div.removeChild(removelast);
            counter--;
        }

    }

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
